How will we maximize the profit ?
We have to determine the maximum profit that can be obtained by making the transactions (no limit on the number of transactions done). For this we need to find out those sets of buying and selling prices which together lead to the maximization of profit.

Here's a naive solution (pseudocode) - 

int calculate(int prices[], int s = 0)
	if (s >= prices.length)
            return 0
        max = 0
        for start = s ..... prices.length {
            maxprofit = 0
            for i = start + 1 .... prices.length {
                if (prices[start] < prices[i]) {
                    profit = calculate(prices, i + 1) + prices[i] - prices[start]
                    if (profit > maxprofit)
                        maxprofit = profit
                }
            }
            if (maxprofit > max)
                max = maxprofit
        }
        return max


This is slow; it runs in O(N^N) time, and for N = 10^5 this will not pass time limit.

Let us look at a better solution now!
In this case, instead of looking for every peak following a valley, we can simply go on crawling over the slope and keep on adding the profit obtained from every consecutive transaction. In the end,we will be using the peaks and valleys effectively, but we need not track the costs corresponding to the peaks and valleys along with the maximum profit, but we can directly keep on adding the difference between the consecutive numbers of the array if the second number is larger than the first one, and at the total sum we obtain will be the maximum profit. This approach will simplify the solution.

Here's the solution:

Initialize maxProfit = 0 

for 2..N:
    if (prices[i] > prices[i-1])  maxProfit += prices[i] - prices[i - 1];

return maxProfit;

Tada!
    	