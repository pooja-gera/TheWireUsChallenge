Let’s assume that in the optimal solution, all the elements will become X. Since we can only change an element’s value to the value of another element of the array, there should be such i that initially A_i = X. Now in order to make all the elements equal to X, we can do the following operations :

Change the value of A_{i-1} to A_i = X
Change the value of A_{i-2} to A_{i-1} = X
...
Change the value of A_1 to A_2 = X

And then :

Change the value of A_{i+1} to A_i = X
Change the value of A_{i+2} to A_{i+1} = X
...
Change the value of A_N to A_{N-1} = X
It’s easy to see that this way all the elements will become X and we will only use one operation for each element (other than i itself). We can see that if an element is already equal to X, we don’t need to use any operations on it. Thus we only have to change the elements that are not equal to X.

Define Count(X) to be the number of elements of the array A that are equal to X. From the above observations we can see that we need N−Count(X) operations to make all the elements equal to X. Since we want to minimize this value, we should choose such X that the value of Count(X) is maximized.

TIME COMPLEXITY
The time complexity is O(N) or O(N⋅log(N)) per test case, depending on the implementation.