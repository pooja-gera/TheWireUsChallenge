There are plenty of different solutions to this problem. Here is one that doesn't use Hall's theorem.

Let's look at pair (ai,bi) as fuction fi(in)=out: how many connections out will be left for the (i+1)-th city if we take in connections from the (i−1)-th station. This function has the following structure: there is a minimum required in (let's name it minxi) to meet the needs of the i-th city and with minxi borrowed connections there will be fi(minxi)=minki free connections to the (i+1)-th city. Increasing minxi by some x we can get fi(minxi+x)=minki+x free connections, but there is upper bound to number of free connections maxki. In other words, the function fi(minxi+x)=min(minki+x,maxki) where x≥0.

For example, let's calculate the corresponding coefficients for the i-th function:

if ai≤bi then min{xi}=0, min{ki}=bi−ai and max{ki}=bi;
if ai>bi then min{xi}=ai−bi, min{ki}=0 and max{ki}=bi.
Why did we define such functions? If we can calculate result function f[1,n](in)=fn(fn−1(…f2(f1(in))…)) then we can check the possibility of meeting all needs by checking that this fuction exists and minx[1,n]≤mink[1,n], i. e. the minimum free mink[1,n] can be used as borrowed minx[1,n].

Fortunately, it turns out that the superposition f{i+1}(fi(in)) is either don't exists (if, for example, max{ki}<min{x[i+1]}) or it has the same structure as any function fi. So we can calculate f[1,n] in one pass and find the answer.

We will skip the detailed formulas to calculate f{i+1}(fi(in)): you can either find them by yourself or look at function merge() in author's solution.

The resulting complexity is O(n).