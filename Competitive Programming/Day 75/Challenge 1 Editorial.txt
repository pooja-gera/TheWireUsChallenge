QUICK EXPLANATION:
Let’s say an integer ii is a breakpoint if the distance between person i and i+1 is greater than 2. The breakpoints divide the line in many segments, we have to find the longest and shortest segment.

EXPLANATION:
We don’t know who is the initially infected person, so we can simulate for each person how the virus will spread and calculate the number of infecteds.
The key observation is that the virus stops spreading in one direction when two adjacent people are at a distance greater than 2.
Let’s suppose person i is the initially infected. The virus will spread to the right of person i and stops if two adjacent people are at a distance greater than 2. Formally, the virus will spread until the minimum r (r≥i), such that x_{r+1}-x_r > 2. For simplicity we can consider that x_{N+1}= ∞.

The following pseudocode describes how to find such rr:

findRight(i):
  r = i
  while r<n and x[r+1]-x[r]<=2:
    r = r + 1

Similarly, the virus will spread to the left of person i and stops if two adjacent people are at a distance greater than 2. Formally, the virus will spread until the maximum l (l≤i), such that x_l-x_{l-1}>2. For simplicity we can consider that x_0= −∞
The following pseudocode describes how to find such ll:

findLeft(i):
  l = i
  while l>1 and x[l]-x[l-1]<=2:
    l = l - 1

Therefore the virus will infect r-l+1 people (everyone with indices l through r).

For each i the maximum number of infecteds is at most N. The initially infected person i can be any of the N people, therefore the brute force will make at most N^2 operations. With such algorithm we can solve the problem in less than a second for a N near 10^4.
However we don’t have to try for all N. Let’s suppose that the initially infected person is i, then the virus will spread from L = findLeft(i) to R = findRight(i). Note that if the initial infected person is any j between L and R (L≤j≤R), then the virus will also spread from L to R. This leads to the following linear time algorithm.

l = 1
bestCase = N 
worstCase = 1
while l <= N:
  r = findRight(l)
  len = r - l + 1
  bestCase = min(bestCase, len)
  worstCase = max(worstCase, len)
  l = r + 1

Since the constraints are very low, even very unoptimized solutions should get accepted, for example the following pseudocode simulates the spread of the virus:

for T = 1 . .. N:   #Why only N iterations?
   for i = 1 . . . N-1:
      if x[i+1] - x[i] <= 2:
         if infected[i]: infected[i+1] = True
         if infected[i+1]: infected[i] = True